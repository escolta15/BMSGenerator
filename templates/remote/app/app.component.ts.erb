import { Component } from '@angular/core';
import { Router, RouterModule, RouterOutlet } from '@angular/router';
import { CommonModule } from '@angular/common';
import { MatTabsModule } from '@angular/material/tabs';
import { MatIconModule } from '@angular/material/icon';
import { Box } from '../models/box.model';
import { Sensor } from '../models/sensor.enum';
import { Sound } from '../models/sound.enum';
import { PageComponent } from './page/page.component';

@Component({
  selector: 'app-<%= @project_name %>',
  standalone: true,
  imports: [
    RouterOutlet,
    CommonModule,
    MatTabsModule,
    MatIconModule,
    PageComponent,
    RouterModule
  ],
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.scss'],
})
export class AppComponent {

  readonly SENSORS_TYPES = Sensor;
  readonly SOUNDS = Sound;

  public title: string = '<%= @project_name %>';
  public lcd: boolean = <%= @touch_screen.lcd %>;
  public totalBox: number = 6;
  public totalPage: number = <%= @touch_screen.pages %>;
  public pages: { [id: number]: any } = {};
  public boxes: Box[] = [<% @touch_screen.get_boxes.each_with_index do |box, index| %>
    { id: <%= index + 1 %>, name: "<%= box[:name] %>", type: "<%= box[:type] %>", icon: <%= box[:icon] %> },
  <% end %>];
  public sensors: any[] = <%= @touch_screen.sensors %>;
  public thermostats: number = <%= @touch_screen.thermostats %>;
  <% if @touch_screen.inputs.nil? %>
  public inputs: number = 0;
  <% else %>
  public inputs: number = <%= @touch_screen.inputs %>;
  <% end %>
  <% if @touch_screen.inputs.nil? %>
  public sound: any[] = <%= @touch_screen.sound %>;
  <% else %>
  public sound: any[] = [];
  <% end %>
  public time: string = '';
  public programming: boolean = <%= @touch_screen.programming %>;
  public programmingLed: boolean = false;
  public ports: any[] = <%= @touch_screen.ports %>;
  <% if defined?(@touch_screen.get_licenses) %>
  public licenses: string[] = <%= @touch_screen.get_licenses %>;
  <% else %>
  public licenses: string[] = [];
  <% end %>
  <% if defined?(@touch_screen.magnet) %>
  public magnet: boolean = <%= @touch_screen.magnet %>;
  <% else %>
  public magnet: boolean = false;
  <% end %>
  <% if defined?(@touch_screen.battery) %>
  public battery: boolean = <%= @touch_screen.battery %>;
  <% else %>
  public battery: boolean = false;
  <% end %>
  <% if defined?(@touch_screen.external_power_supply) %>
  public externalPowerSupply: boolean = <%= @touch_screen.external_power_supply %>;
  <% else %>
  public externalPowerSupply: boolean = false;
  <% end %>

  private clock: boolean = <%= @touch_screen.clock %>;

  constructor(private router: Router) {
    this.initializePages();
    this.addBoxes();
    this.setTime();
  }

  public getPages(): Box[] {
    return Object.values(this.pages);
  }

  public reset(): void {
    this.programmingLed = true;
    setTimeout(() => (this.programmingLed = false), 3000);
    this.router.navigate(['']);
  }

  public onChangePage(): void {
    if (this.router.config[0] && this.router.config[0].path == '') {
      this.router.navigate(['']);
    } else {
      this.router.navigate(['<%= @project_name %>/touchscreen/']);
    }
  }

  <% if defined?(@touch_screen.iluminated_button) %>
  public turnOn(): void {
    console.log('Do something');
  }
  
  <%end%>
  private initializePages(): void {
    for (let currentPage = 0; currentPage < this.totalPage; currentPage++) {
      this.pages[currentPage] = [];
    }
  }

  private addBoxes(): void {
    this.boxes.forEach((box: Box, index: number) => {
      const indexPage = Math.trunc(index / this.totalBox);
      this.pages[indexPage].push(box);
    });
  }

  private setTime(): void {
    if (this.clock) {
      setInterval(() => {
        this.time = new Date().toLocaleTimeString();
      }, 1000);
    }
  }

}
